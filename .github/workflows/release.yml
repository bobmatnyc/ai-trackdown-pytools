name: Release Management

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version commitizen toml
      
      - name: Determine version
        id: version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            # Auto-determine version based on release type
            CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
            case "${{ inputs.release_type }}" in
              major)
                VERSION=$(python -c "v='$CURRENT_VERSION'.split('.'); v[0]=str(int(v[0])+1); v[1]='0'; v[2]='0'; print('.'.join(v))")
                ;;
              minor)
                VERSION=$(python -c "v='$CURRENT_VERSION'.split('.'); v[1]=str(int(v[1])+1); v[2]='0'; print('.'.join(v))")
                ;;
              patch)
                VERSION=$(python -c "v='$CURRENT_VERSION'.split('.'); v[2]=str(int(v[2])+1); print('.'.join(v))")
                ;;
              prerelease)
                VERSION="${CURRENT_VERSION}-rc.1"
                ;;
            esac
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Update version
        run: |
          # Update version in pyproject.toml
          python -c "
          import toml
          data = toml.load('pyproject.toml')
          data['project']['version'] = '${{ steps.version.outputs.version }}'
          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)
          "
          
          # Update version in __init__.py if it exists
          if [ -f "src/ai_trackdown_pytools/__init__.py" ]; then
            sed -i "s/__version__ = .*/__version__ = \"${{ steps.version.outputs.version }}\"/" src/ai_trackdown_pytools/__init__.py
          fi
      
      - name: Generate changelog
        run: |
          # Use commitizen to generate changelog
          cz changelog --unreleased-version ${{ steps.version.outputs.version }} || true
          
          # Generate release notes
          git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD > RELEASE_NOTES.md
          
          # Add header to release notes
          echo -e "# Release ${{ steps.version.outputs.version }}\n\n$(cat RELEASE_NOTES.md)" > RELEASE_NOTES.md
      
      - name: Create release commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add pyproject.toml
          git add src/ai_trackdown_pytools/__init__.py || true
          git add CHANGELOG.md || true
          git add RELEASE_NOTES.md
          
          git commit -m "chore: release version ${{ steps.version.outputs.version }}"
          
          # Create and push tag
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release version ${{ steps.version.outputs.version }}"
          git push origin HEAD:main
          git push origin "v${{ steps.version.outputs.version }}"
      
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md

  trigger-publish:
    name: Trigger Publishing
    needs: prepare-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Trigger PyPI publish workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'publish-pypi.yml',
              ref: 'v${{ needs.prepare-release.outputs.version }}',
              inputs: {
                environment: 'production'
              }
            })
      
      - name: Create draft release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          release_name: Release ${{ needs.prepare-release.outputs.version }}
          draft: true
          prerelease: ${{ inputs.release_type == 'prerelease' }}