name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
      pre_release:
        description: 'Create pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHONPATH: ${{ github.workspace }}/src

jobs:
  # Job 1: Release validation and testing
  release-validation:
    name: Release Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test,dev]
        pip install bump2version

    - name: Extract version information
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual version bump
          current_version=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "Current version: $current_version"
          
          # Bump version based on input
          bump2version ${{ github.event.inputs.version_type }} --dry-run --verbose
          new_version=$(bump2version ${{ github.event.inputs.version_type }} --dry-run --list | grep new_version | cut -d= -f2)
          
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ github.event.inputs.pre_release }}" >> $GITHUB_OUTPUT
        else
          # Extract from tag
          version=${GITHUB_REF#refs/tags/v}
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Run release validation tests
      run: |
        echo "🧪 Running release validation tests..."
        python scripts/test_runner.py full --threshold 90 --verbose
        echo "✅ All release validation tests passed"

    - name: Validate package metadata
      run: |
        python -c "
        import toml
        pyproject = toml.load('pyproject.toml')
        assert 'project' in pyproject
        assert 'name' in pyproject['project']
        assert 'version' in pyproject['project']
        assert 'description' in pyproject['project']
        print('✅ Package metadata validation passed')
        "

    - name: Check changelog
      run: |
        if [[ ! -f CHANGELOG.md ]]; then
          echo "❌ CHANGELOG.md not found"
          exit 1
        fi
        
        if ! grep -q "## \[" CHANGELOG.md; then
          echo "❌ No version entries found in CHANGELOG.md"
          exit 1
        fi
        
        echo "✅ Changelog validation passed"

  # Job 2: Multi-platform build and test
  release-build:
    name: Release Build (${{ matrix.os }})
    needs: release-validation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest

    - name: Build package
      run: |
        python -m build
        echo "📦 Package built successfully on ${{ matrix.os }}"

    - name: Validate package
      run: |
        twine check dist/*
        echo "✅ Package validation passed on ${{ matrix.os }}"

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import ai_trackdown_pytools; print('✅ Package installation test passed')"
        aitrackdown --version

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: dist/
        retention-days: 30

  # Job 3: Security and quality validation
  release-security:
    name: Release Security Validation
    needs: release-validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install bandit safety pip-audit

    - name: Run security scans
      run: |
        echo "🔒 Running security validation for release..."
        
        # Bandit security scan
        bandit -r src -f json -o bandit-release-report.json
        bandit -r src
        
        # Safety vulnerability check
        safety check --json --output safety-release-report.json
        safety check
        
        # pip-audit for additional vulnerability scanning
        pip-audit --format=json --output=pip-audit-release-report.json
        pip-audit
        
        echo "✅ Security validation completed"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: release-security-reports
        path: |
          bandit-release-report.json
          safety-release-report.json
          pip-audit-release-report.json

  # Job 4: Package publishing
  publish:
    name: Publish Release
    needs: [release-validation, release-build, release-security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    environment: 
      name: release
      url: https://pypi.org/project/ai-trackdown-pytools/
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-ubuntu-latest
        path: dist/

    - name: Install publishing tools
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Publish to Test PyPI (pre-release)
      if: needs.release-validation.outputs.is_prerelease == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
        echo "📦 Published to Test PyPI"

    - name: Publish to PyPI (production)
      if: needs.release-validation.outputs.is_prerelease == 'false'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        echo "🚀 Published to PyPI"

    - name: Verify PyPI publication
      if: needs.release-validation.outputs.is_prerelease == 'false'
      run: |
        sleep 60  # Wait for PyPI to update
        pip install --upgrade ai-trackdown-pytools==${{ needs.release-validation.outputs.version }}
        python -c "import ai_trackdown_pytools; print('✅ PyPI publication verified')"

  # Job 5: GitHub release creation
  github-release:
    name: Create GitHub Release
    needs: [release-validation, publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate release notes
      id: release_notes
      run: |
        version=${{ needs.release-validation.outputs.version }}
        
        # Extract changelog section for this version
        if grep -q "## \[$version\]" CHANGELOG.md; then
          changelog_section=$(sed -n "/## \[$version\]/,/## \[/p" CHANGELOG.md | head -n -1)
        else
          changelog_section="No changelog entry found for version $version"
        fi
        
        # Generate release notes
        cat > release_notes.md << EOF
        # AI Trackdown PyTools v$version
        
        ## What's Changed
        
        $changelog_section
        
        ## Installation
        
        \`\`\`bash
        pip install ai-trackdown-pytools==$version
        \`\`\`
        
        ## Verification
        
        \`\`\`bash
        aitrackdown --version
        \`\`\`
        
        ## Full Changelog
        
        **Full Changelog**: https://github.com/ai-trackdown/ai-trackdown-pytools/compare/v${{ needs.release-validation.outputs.previous_version }}...v$version
        EOF

    - name: Create/Update Git Tag
      run: |
        version=${{ needs.release-validation.outputs.version }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if git tag -l | grep -q "v$version"; then
          echo "Tag v$version already exists"
        else
          git tag -a "v$version" -m "Release version $version"
          git push origin "v$version"
        fi

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.release-validation.outputs.version }}
        release_name: AI Trackdown PyTools v${{ needs.release-validation.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ needs.release-validation.outputs.is_prerelease == 'true' }}

    - name: Download and attach artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-ubuntu-latest
        path: dist/

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_content_type: application/zip

  # Job 6: Post-release tasks
  post-release:
    name: Post-Release Tasks
    needs: [release-validation, publish, github-release]
    runs-on: ubuntu-latest
    if: always() && (needs.publish.result == 'success' || needs.github-release.result == 'success')
    steps:
    - uses: actions/checkout@v4

    - name: Update version for development
      if: github.event_name == 'workflow_dispatch' && needs.release-validation.outputs.is_prerelease == 'false'
      run: |
        echo "🔄 Preparing for next development cycle..."
        
        # This would typically bump to next development version
        # Implementation depends on your versioning strategy
        echo "Next development version preparation completed"

    - name: Generate release summary
      run: |
        cat > release-summary.md << EOF
        # Release Summary: v${{ needs.release-validation.outputs.version }}
        
        **Released**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Version**: ${{ needs.release-validation.outputs.version }}
        **Type**: ${{ needs.release-validation.outputs.is_prerelease == 'true' && 'Pre-release' || 'Production Release' }}
        
        ## Release Status
        
        - ✅ **Validation**: All release validation tests passed
        - ✅ **Build**: Multi-platform builds successful
        - ✅ **Security**: Security validation completed
        - ✅ **Publishing**: Package published to PyPI
        - ✅ **GitHub**: GitHub release created
        
        ## Artifacts
        
        - 📦 Python packages available on PyPI
        - 📋 Release notes published on GitHub
        - 🔒 Security reports archived
        
        ## Installation
        
        \`\`\`bash
        pip install ai-trackdown-pytools==${{ needs.release-validation.outputs.version }}
        \`\`\`
        
        ## Next Steps
        
        - Monitor PyPI downloads and user feedback
        - Watch for any post-release issues
        - Continue development for next version
        
        **🎉 Release completed successfully!**
        EOF

    - name: Upload release summary
      uses: actions/upload-artifact@v4
      with:
        name: release-summary
        path: release-summary.md
        retention-days: 180

    - name: Notify success
      run: |
        echo "🎉 Release v${{ needs.release-validation.outputs.version }} completed successfully!"
        echo "Package is now available on PyPI"
        echo "GitHub release has been created"