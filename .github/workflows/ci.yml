name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Nightly regression testing at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'full'
        type: choice
        options:
          - 'fast'
          - 'full'
          - 'regression'
      performance_benchmarks:
        description: 'Run performance benchmarks'
        required: false
        default: false
        type: boolean

env:
  COVERAGE_THRESHOLD: 85
  PYTHONPATH: ${{ github.workspace }}/src
  PIP_CACHE_DIR: ~/.cache/pip
  PYTEST_ADDOPTS: "--color=yes"

jobs:
  # Job 1: Pre-flight checks and fast validation
  preflight:
    name: Pre-flight Validation
    runs-on: ubuntu-latest
    outputs:
      should_run_full: ${{ steps.check.outputs.should_run_full }}
      test_level: ${{ steps.check.outputs.test_level }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check changes and determine test scope
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "should_run_full=true" >> $GITHUB_OUTPUT
          echo "test_level=regression" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_run_full=true" >> $GITHUB_OUTPUT
          echo "test_level=${{ github.event.inputs.test_level || 'full' }}" >> $GITHUB_OUTPUT
        elif git diff --name-only HEAD~1 HEAD | grep -E "\.(py|toml|yml|yaml)$"; then
          echo "should_run_full=true" >> $GITHUB_OUTPUT
          echo "test_level=full" >> $GITHUB_OUTPUT
        else
          echo "should_run_full=false" >> $GITHUB_OUTPUT
          echo "test_level=fast" >> $GITHUB_OUTPUT
        fi

  # Job 2: Multi-platform matrix testing
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    needs: preflight
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        # Add architecture matrix for comprehensive testing
        include:
          - os: ubuntu-latest
            python-version: "3.11"
            arch: x64
            is_primary: true
          - os: macos-latest
            python-version: "3.11" 
            arch: arm64
          - os: windows-latest
            python-version: "3.11"
            arch: x64

    timeout-minutes: 45
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Cache test dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
          .tox
        key: test-deps-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', '.pre-commit-config.yaml') }}
        restore-keys: |
          test-deps-${{ runner.os }}-py${{ matrix.python-version }}-
          test-deps-${{ runner.os }}-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y git
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install git
        
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install git

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .[test,dev]
        pip install tox tox-gh-actions

    - name: Verify installation
      run: |
        python -c "import ai_trackdown_pytools; print('✅ Package installed successfully')"
        aitrackdown --version
        python -m pytest --version

    - name: Run pre-commit hooks (Primary only)
      if: matrix.is_primary == true
      run: |
        pre-commit run --all-files --show-diff-on-failure

    - name: Run test suite with enhanced reporting
      run: |
        python scripts/test_runner.py ${{ needs.preflight.outputs.test_level }} \
          --threshold ${{ env.COVERAGE_THRESHOLD }} \
          --verbose
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        CI: true
        GITHUB_ACTIONS: true
        COVERAGE_CORE: sysmon

    - name: Performance benchmarks
      if: github.event.inputs.performance_benchmarks == 'true' || github.event_name == 'schedule'
      run: |
        python -m pytest tests/ -m "not slow" --benchmark-only --benchmark-json=benchmark_results.json
      continue-on-error: true

    - name: Upload coverage reports
      if: matrix.is_primary == true
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml,./coverage.lcov
        flags: unittests,python${{ matrix.python-version }},${{ matrix.os }}
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        fail_ci_if_error: true
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          test-reports/
          htmlcov/
          coverage.xml
          coverage.json
          benchmark_results.json
        retention-days: 7
        if-no-files-found: warn

  # Job 3: Enhanced code quality and static analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install semgrep vulture radon xenon

    - name: Code formatting check (Black)
      run: |
        black --check --diff src tests
        echo "✅ Code formatting check passed"

    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff src tests
        echo "✅ Import sorting check passed"

    - name: Linting (Ruff)
      run: |
        ruff check src tests --format=github
        echo "✅ Linting check passed"

    - name: Type checking (MyPy)
      run: |
        mypy src --junit-xml=mypy-report.xml
        echo "✅ Type checking passed"

    - name: Complexity analysis (Radon)
      run: |
        radon cc src --min B --show-complexity
        radon mi src --min B
        echo "✅ Complexity analysis completed"

    - name: Dead code detection (Vulture)
      run: |
        vulture src tests --min-confidence 80
        echo "✅ Dead code detection completed"
      continue-on-error: true

    - name: Security scanning (Semgrep)
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json
        echo "✅ Security scanning completed"
      continue-on-error: true

    - name: Upload quality reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          mypy-report.xml
          semgrep-report.json
        retention-days: 7

  # Job 4: Enhanced security and dependency analysis
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety pip-audit cyclonedx-bom
        pip install -e .[dev]

    - name: Generate Software Bill of Materials (SBOM)
      run: |
        cyclonedx-py -o sbom.json
        echo "✅ SBOM generated"

    - name: Security linting (Bandit)
      run: |
        bandit -r src -f json -o bandit-report.json --severity-level medium
        bandit -r src -f txt
        echo "✅ Security linting completed"

    - name: Dependency vulnerability scanning (Safety)
      run: |
        safety check --json --output safety-report.json
        safety check
        echo "✅ Dependency vulnerability scan completed"
      continue-on-error: true

    - name: Advanced dependency audit (pip-audit)
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit
        echo "✅ Advanced dependency audit completed"
      continue-on-error: true

    - name: License compliance check
      run: |
        pip-licenses --format=json --output-file=licenses-report.json
        pip-licenses
        echo "✅ License compliance check completed"
      continue-on-error: true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
          licenses-report.json
          sbom.json
        retention-days: 30

  # Job 5: Package building and validation
  build:
    name: Package Build & Validation
    runs-on: ubuntu-latest
    needs: [test, code-quality, security]
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest

    - name: Validate package manifest
      run: |
        check-manifest
        echo "✅ Package manifest validation passed"

    - name: Build source distribution
      run: |
        python -m build --sdist
        echo "✅ Source distribution built"

    - name: Build wheel distribution
      run: |
        python -m build --wheel
        echo "✅ Wheel distribution built"

    - name: Validate package distributions
      run: |
        twine check dist/*
        echo "✅ Package validation passed"

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import ai_trackdown_pytools; print('✅ Package installation test passed')"
        aitrackdown --version

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

  # Job 6: Integration testing with real environments
  integration-tests:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    needs: [build]
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run-integration-tests')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Install package from wheel
      run: |
        pip install dist/*.whl
        
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ tests/e2e/ -v --tb=short
        
    - name: Test CLI commands
      run: |
        aitrackdown --help
        aitrackdown --version
        echo "✅ CLI integration tests passed"

  # Job 7: Deployment readiness check
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, build, integration-tests]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    steps:
    - name: Deployment readiness summary
      run: |
        echo "🚀 Deployment Readiness Check"
        echo "✅ All tests passed"
        echo "✅ Code quality checks passed"
        echo "✅ Security scans completed"
        echo "✅ Package build successful"
        echo "✅ Integration tests passed"
        echo ""
        echo "🎯 Ready for deployment to production"
        
    - name: Generate deployment report
      run: |
        cat > deployment-report.md << EOF
        # Deployment Readiness Report
        
        **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref_name }}
        
        ## Quality Gates Status
        
        - ✅ **Tests**: All test suites passed across multiple platforms
        - ✅ **Code Quality**: Linting, formatting, and type checking passed
        - ✅ **Security**: Security scans completed with no critical issues
        - ✅ **Build**: Package builds successfully and validates
        - ✅ **Integration**: Integration tests passed on all platforms
        
        ## Metrics
        
        - **Test Coverage**: ≥85% (requirement met)
        - **Platforms Tested**: Ubuntu, Windows, macOS
        - **Python Versions**: 3.8, 3.9, 3.10, 3.11, 3.12
        
        ## Artifacts
        
        - Python package distributions available
        - Test reports and coverage data collected
        - Security scan reports available
        
        **Status**: 🟢 READY FOR DEPLOYMENT
        EOF
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-readiness-report
        path: deployment-report.md
        retention-days: 90