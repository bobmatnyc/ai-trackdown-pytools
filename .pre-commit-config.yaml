# Pre-commit configuration for comprehensive code quality checks
# Updated for 2025 best practices with enhanced automation

default_language_version:
  python: python3.11

default_stages: [commit, push]

repos:
  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-toml
      - id: check-json
      - id: check-xml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: debug-statements
      - id: detect-private-key
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
      - id: name-tests-test
        args: [--pytest-test-first]

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        language_version: python3
        args: [--safe, --target-version, py38]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black", "--filter-files"]

  # Linting and code quality
  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.2.0
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix, --show-fixes]
      - id: ruff-format

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: 
          - types-PyYAML
          - types-toml
          - types-requests
          - pydantic
        args: [--strict, --ignore-missing-imports, --install-types, --non-interactive]
        exclude: ^(tests/|docs/)

  # Security scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        args: ["-c", "pyproject.toml"]
        additional_dependencies: ["bandit[toml]"]
        exclude: ^tests/

  # Dependency vulnerability scanning
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        args: [--json, --output, safety-report.json]

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        additional_dependencies: [tomli]

  # YAML/JSON formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types_or: [yaml, json, markdown]
        exclude: ^(\.github/workflows/|docs/)

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.14.1
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Advanced Python quality checks
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py38-plus]

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
        args: [--max-line-length=88, --extend-ignore=E203,W503]

  # Test file validation
  - repo: local
    hooks:
      - id: pytest-check
        name: pytest-check
        entry: python -m pytest --collect-only -q
        language: system
        pass_filenames: false
        always_run: true
        stages: [push]

  # Custom project-specific checks
  - repo: local
    hooks:
      - id: check-version-consistency
        name: Check version consistency
        entry: python
        language: system
        args:
          - -c
          - |
            import toml
            import re
            from pathlib import Path
            
            # Check version consistency across files
            pyproject = toml.load('pyproject.toml')
            version = pyproject['project']['version']
            
            # Check version.py if it exists
            version_file = Path('src/ai_trackdown_pytools/version.py')
            if version_file.exists():
                content = version_file.read_text()
                if f'__version__ = "{version}"' not in content:
                    print(f"Version mismatch in {version_file}")
                    exit(1)
            
            print(f"✅ Version consistency check passed: {version}")
        files: ^(pyproject\.toml|src/.*version\.py)$
        pass_filenames: false

      - id: check-test-coverage-config
        name: Check test coverage configuration
        entry: python
        language: system
        args:
          - -c
          - |
            import toml
            
            pyproject = toml.load('pyproject.toml')
            
            # Check coverage configuration
            coverage_config = pyproject.get('tool', {}).get('coverage', {})
            if not coverage_config:
                print("❌ Missing coverage configuration")
                exit(1)
                
            # Check minimum coverage threshold
            report_config = coverage_config.get('report', {})
            threshold = report_config.get('fail_under', 0)
            if threshold < 85:
                print(f"❌ Coverage threshold too low: {threshold}% (minimum: 85%)")
                exit(1)
                
            print(f"✅ Coverage configuration valid: {threshold}% threshold")
        files: ^pyproject\.toml$
        pass_filenames: false

      - id: validate-ci-config
        name: Validate CI configuration
        entry: python
        language: system
        args:
          - -c
          - |
            import yaml
            from pathlib import Path
            
            ci_file = Path('.github/workflows/ci.yml')
            if not ci_file.exists():
                print("❌ CI configuration missing")
                exit(1)
                
            with open(ci_file) as f:
                ci_config = yaml.safe_load(f)
                
            # Check Python versions match pyproject.toml
            import toml
            pyproject = toml.load('pyproject.toml')
            classifiers = pyproject['project']['classifiers']
            
            py_versions = []
            for classifier in classifiers:
                if 'Programming Language :: Python :: 3.' in classifier:
                    version = classifier.split('::')[-1].strip()
                    if version not in ['3', 'Programming Language']:
                        py_versions.append(version)
            
            print(f"✅ CI configuration validated")
        files: ^(\.github/workflows/.*\.ya?ml|pyproject\.toml)$
        pass_filenames: false

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false